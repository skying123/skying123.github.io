<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>&#39;markdown语法&#39;</title>
      <link href="/2020/05/11/markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/05/11/markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。  </p><h3 id="行内语法讲解"><a href="#行内语法讲解" class="headerlink" title="行内语法讲解"></a>行内语法讲解</h3><h4 id="注释的表述"><a href="#注释的表述" class="headerlink" title="注释的表述"></a>注释的表述</h4><ul><li>代码法  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&#39;display: none&#39;&gt;</span><br><span class="line">哈哈我是注释，不会在浏览器中显示。</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#96;&#96;&#96;  </span><br><span class="line"></span><br><span class="line">- html注释</span><br></pre></td></tr></table></figure><!--哈哈我是注释，不会在浏览器中显示。--></li></ul><!--哈哈我是多段注释，不会在浏览器中显示。    --><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- hack方法</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#### 标题</span><br></pre></td></tr></table></figure><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题  "></a>六级标题  <!--最多6级标题--></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">结果如下：  </span><br><span class="line"></span><br><span class="line">&gt; # 一级标题</span><br><span class="line">&gt; ## 二级标题</span><br><span class="line">&gt; ### 三级标题</span><br><span class="line">&gt; #### 四级标题</span><br><span class="line">&gt; ##### 五级标题</span><br><span class="line">&gt; ###### 六级标题  &lt;!--最多6级标题--&gt;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 任务列表</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> 任务一 未做任务 <code>- + 空格 + [ ]</code></li><li><input checked="" disabled="" type="checkbox"> 任务二 已做任务 <code>- + 空格 + [x]</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">效果如下：  </span><br><span class="line"></span><br><span class="line"> [ ] 任务一 未做任务 &#96;- + 空格 + [ ]&#96;  </span><br><span class="line"> [x] 任务二 已做任务 &#96;- + 空格 + [x]&#96;</span><br><span class="line"></span><br><span class="line">#### 缩进、换行、空行、对齐方式  </span><br><span class="line"></span><br><span class="line">- 首行缩进  </span><br><span class="line">不同特殊占位符所占空白是不一样大的。</span><br></pre></td></tr></table></figure>【1】 &emsp;或&#8195; //全角<br>【2】 &ensp;或&#8194; //半角<br>【3】 &nbsp;或&#160;  //半角之半角<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 换行  </span><br><span class="line">由于markdown编辑器的不同,可能在一行字后面，直接换行回车，也能实现换行，</span><br><span class="line">但是在Visual Studio Code上，想要**换行必须得在一行字后面空两个格子才行**。  </span><br><span class="line"></span><br><span class="line">- 空行  </span><br><span class="line">在编辑的时候有多少个空行\(只要这一行只有回车或者space没有其他的字符就算空行)，</span><br><span class="line">**在渲染之后，只隔着一行**。  </span><br><span class="line"></span><br><span class="line">- 对齐方式  </span><br><span class="line">代码：</span><br></pre></td></tr></table></figure><center>行中心对齐</center><p align="left">行左对齐</p><p align="right">行右对齐</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">显示效果：  </span><br><span class="line">&lt;center&gt;行中心对齐&lt;&#x2F;center&gt;</span><br><span class="line">&lt;p align&#x3D;&quot;left&quot;&gt;行左对齐&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p align&#x3D;&quot;right&quot;&gt;行右对齐&lt;&#x2F;p&gt;  </span><br><span class="line"></span><br><span class="line">#### 斜体、粗体、删除线、下划线、背景高亮  </span><br><span class="line"></span><br><span class="line">- 代码</span><br></pre></td></tr></table></figure></li></ul><p><em>斜体</em>或<em>斜体</em><br><strong>粗体</strong><br><strong><em>加粗斜体</em></strong><br><del>删除线</del><br>++下划线++<br>==背景高亮==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 显示效果  </span><br><span class="line">*斜体*或_斜体_</span><br><span class="line">**粗体**</span><br><span class="line">***加粗斜体***</span><br><span class="line">~~删除线~~</span><br><span class="line">++下划线++</span><br><span class="line">&#x3D;&#x3D;背景高亮&#x3D;&#x3D;  </span><br><span class="line"></span><br><span class="line">#### 超链接、页内链接、自动链接、注脚  </span><br><span class="line"></span><br><span class="line">- 行内式   </span><br><span class="line"></span><br><span class="line">代码:</span><br></pre></td></tr></table></figure><p>欢迎阅读 <a href="https://github.com/skying123" target="_blank" rel="noopener" title="链接名称">链接</a></p><p><a href="https://github.com/skying123" target="_blank" rel="noopener">https://github.com/skying123</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">语法说明：  </span><br><span class="line">\[]里写链接文字，\()里写链接地址, \()中的&quot;&quot;中可以为链接指定title属性，</span><br><span class="line">title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 </span><br><span class="line">title文字，链接地址与title前有一个空格。\&lt;&gt;里面直接写链接。   </span><br><span class="line"></span><br><span class="line">显示效果：  </span><br><span class="line">欢迎阅读 [链接](https:&#x2F;&#x2F;github.com&#x2F;skying123 &quot;链接名称&quot;)   </span><br><span class="line">&lt;https:&#x2F;&#x2F;github.com&#x2F;skying123&gt;</span><br><span class="line"></span><br><span class="line">- 参考式  </span><br><span class="line"></span><br><span class="line">代码：</span><br></pre></td></tr></table></figure><p>我经常去的几个网站[Google][1]、[Leanote][2]。<br>[1]:<a href="http://www.google.com" target="_blank" rel="noopener">http://www.google.com</a><br>[2]:<a href="http://www.leanote.com" target="_blank" rel="noopener">http://www.leanote.com</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">语法说明：</span><br><span class="line">参考式链接分为两部分，文中的写法 \[链接文字]\[链接标记]，在文本的任意位置添加\[链接标记]:链接地址。</span><br><span class="line"></span><br><span class="line">如果链接文字本身可以做为链接标记，你也可以写成\[链接文字]\[]</span><br><span class="line">\[链接文字]：链接地址的形式，见代码的最后一行。  </span><br><span class="line"></span><br><span class="line">显示效果：  </span><br><span class="line"></span><br><span class="line">我经常去的几个网站[Google][1]、[Leanote][2]。</span><br><span class="line"></span><br><span class="line">- 注脚</span><br></pre></td></tr></table></figure><p>使用 Markdown<a href="Markdown是一种纯文本标记语言">^1</a>可以效率的书写文档, 直接转换成 HTML[^2]。</p><p>[^2]:HyperText Markup Language 超文本标记语言</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">语法说明：</span><br><span class="line"></span><br><span class="line">在需要添加注脚的文字后加上脚注名字&#96;\[^注脚名字]&#96;,称为加注。 </span><br><span class="line">然后在文本的任意位置\(一般在最后)添加脚注，脚注前必须有对应的脚注名字。</span><br><span class="line"></span><br><span class="line">注意：  </span><br><span class="line">经测试注脚与注脚之间必须空一行，不然会失效。</span><br><span class="line">成功后会发现，即使你没有把注脚写在文末，经Markdown转换后，</span><br><span class="line">也会自动归类到文章的最后。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 无序列表、有序列表 </span><br><span class="line"></span><br><span class="line">- 无序列表  </span><br><span class="line"> 使用 *，+，- 表示无序列表。</span><br><span class="line"> 代码：</span><br></pre></td></tr></table></figure><ul><li>无序列表项 一</li></ul><ul><li>无序列表项 二</li></ul><ul><li>无序列表项 三<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">显示效果:  </span><br><span class="line">* 无序列表项 一</span><br><span class="line">+ 无序列表项 二</span><br><span class="line">- 无序列表项 三  </span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">- 有序列表  </span><br><span class="line"> 有序列表则使用数字接着一个英文句点。</span><br><span class="line"> 代码：</span><br></pre></td></tr></table></figure></li></ul><ol><li>有序列表项 一</li><li>有序列表项 二</li><li>有序列表项 三<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">显示效果： </span><br><span class="line">1. 有序列表项 一</span><br><span class="line">2. 有序列表项 二</span><br><span class="line">3. 有序列表项 三  </span><br><span class="line"></span><br><span class="line">#### 插入图片  </span><br><span class="line">代码:</span><br></pre></td></tr></table></figure><img src="/" class="lazyload" data-src="http://zh.mweb.im/asset/img/set-up-git.gif"  alt="GitHub set up" title="图片Title"><br>格式: <img src="/" class="lazyload" data-src="%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80"  alt="图片Alt" title="图片Title"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">语法中图片Alt的意思是如果图片因为某些原因不能显示，</span><br><span class="line">就用定义的图片Alt文字来代替图片。 图片Title则和链接中的Title一样，</span><br><span class="line">表示鼠标悬停与图片上时出现的文字。 Alt 和 Title 都不是必须的，</span><br><span class="line">可以省略，但建议写上。  </span><br><span class="line"></span><br><span class="line">效果如下:  </span><br><span class="line">![图片Alt](https:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;1496626-c3d52ee452341b61.png?imageMogr2&#x2F;auto-orient&#x2F;strip|imageView2&#x2F;2&#x2F;w&#x2F;310&#x2F;format&#x2F;webp &quot;图片title&quot;)</span><br><span class="line"></span><br><span class="line">#### 多级引用  </span><br><span class="line"></span><br><span class="line">代码：</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>请问 Markdwon 怎么用？ - 小白<br>自己看教程！ - 愤青<br>教程在哪？ - 小白</p></blockquote></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 请问 Markdwon 怎么用？ - 小白  </span><br><span class="line"></span><br><span class="line">&gt;&gt; 自己看教程！ - 愤青  </span><br><span class="line"></span><br><span class="line">&gt; 教程在哪？ - 小白  </span><br><span class="line"></span><br><span class="line">语法说明：  </span><br><span class="line">引用需要在被引用的文本前加上&gt;符号和空格，</span><br><span class="line">允许多层嵌套，也允许你偷懒只在整个段落的第一行最前面加上 &gt; 。</span><br><span class="line"></span><br><span class="line">#### 转义字符、字体、字号、颜色  </span><br><span class="line"></span><br><span class="line">- 转义字符  </span><br><span class="line">  Markdown中的转义字符为\，转义的有：  </span><br><span class="line">  \\ 反斜杠 \&#96; 反引号 \* 星号 \_ 下划线 \&#123;&#125; 大括号 \[] 中括号 \() 小括号  \# 井号 \+ 加号 \- 减号 \. 英文句号 \! 感叹号  </span><br><span class="line"></span><br><span class="line">- 字体、字号、颜色  </span><br><span class="line">  代码:</span><br></pre></td></tr></table></figure><font face="黑体">我是黑体字</font><br><font face="微软雅黑">我是微软雅黑</font><br><font face="STCAIYUN">我是华文彩云</font><br><font color=#0099ff size=12 face="黑体">黑体</font><br><font color=gray size=5>gray</font><br><font color=#00ffff size=3>null</font><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">  显示效果：</span><br><span class="line">  </span><br><span class="line">  &lt;font face&#x3D;&quot;黑体&quot;&gt;我是黑体字&lt;&#x2F;font&gt;</span><br><span class="line">  &lt;font face&#x3D;&quot;微软雅黑&quot;&gt;我是微软雅黑&lt;&#x2F;font&gt;</span><br><span class="line">  &lt;font face&#x3D;&quot;STCAIYUN&quot;&gt;我是华文彩云&lt;&#x2F;font&gt;</span><br><span class="line">  &lt;font color&#x3D;#0099ff size&#x3D;12 face&#x3D;&quot;黑体&quot;&gt;黑体&lt;&#x2F;font&gt;</span><br><span class="line">  &lt;font color&#x3D;gray size&#x3D;5&gt;gray&lt;&#x2F;font&gt;  </span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">### 块语法讲解  </span><br><span class="line"></span><br><span class="line">#### 内容目录  </span><br><span class="line">在段落中填写 \[TOC\] 以显示全文内容的目录结构。  </span><br><span class="line">&gt; \[TOC\]  </span><br><span class="line"></span><br><span class="line">#### 代码块  </span><br><span class="line"></span><br><span class="line">对于程序员来说这个功能是必不可少的，插入程序代码的方式有两种，一种是利用缩进(Tab), 另一种是利用”&#96;”符号（一般在ESC键下方）包裹代码。  </span><br><span class="line"></span><br><span class="line">- 行内式  </span><br><span class="line">代码:  </span><br><span class="line">&gt; C语言里的函数 &#96;scanf()&#96; 怎么使用？  </span><br><span class="line"></span><br><span class="line">效果:  </span><br><span class="line">C语言里的函数 &#96;scanf()&#96; 怎么使用？  </span><br><span class="line"></span><br><span class="line">- 缩进式多行代码  </span><br><span class="line"></span><br><span class="line">缩进 4 个空格或是 1 个制表符</span><br><span class="line"></span><br><span class="line">一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</span><br><span class="line"></span><br><span class="line">代码： </span><br><span class="line"></span><br><span class="line">    #include &lt;stdio.h&gt;</span><br><span class="line">    int main(void)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&amp;#34;Hello world\n&amp;#34;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">- 用六个&#96;包裹多行代码  </span><br><span class="line"></span><br><span class="line">代码:</span><br></pre></td></tr></table></figure>、、、<br>include &lt;stdio.h&gt;<br>int main(void)<br>{<br>printf(“Hello world\n”);<br>}<br>、、、<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">效果:</span><br></pre></td></tr></table></figure>include &lt;stdio.h&gt;<br>int main(void)<br>{<br>printf(“Hello world\n”);<br>}<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 表格 </span><br><span class="line">语法说明：</span><br><span class="line"></span><br><span class="line">不管是哪种方式，第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行。</span><br><span class="line">列于列之间用管道符|隔开。原生方式的表格每一行的两边也要有管道符。</span><br><span class="line">第二行还可以为不同的列指定对齐方向。默认为左对齐，在-右边加上:就右对齐。</span><br><span class="line">&#96;:----&#96; 左对齐， &#96;:----:&#96; 中心对齐，&#96;----:&#96; 右对齐</span><br><span class="line"></span><br><span class="line">表格代码：</span><br></pre></td></tr></table></figure><table><thead><tr><th>学号</th><th>姓名</th><th>序号</th></tr></thead><tbody><tr><td>小明明</td><td>男</td><td>5</td></tr><tr><td>小红</td><td>女</td><td>79</td></tr><tr><td>小陆</td><td>男</td><td>192</td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">效果如下:  </span><br><span class="line"></span><br><span class="line">|学号|姓名|序号|  </span><br><span class="line">|:----|:----:|:----:|  </span><br><span class="line">|小明明|男|5|  </span><br><span class="line">|小红|女|79|  </span><br><span class="line">|小陆|男|192|   </span><br><span class="line"></span><br><span class="line">#### LaTeX 公式  </span><br><span class="line"></span><br><span class="line">- 表示行内公式  </span><br><span class="line">  代码： </span><br><span class="line">  &gt; 质能守恒方程可以用一个很简洁的方程式 &#96;$E &#x3D; m c^2 $&#96;来表达。 </span><br><span class="line"></span><br><span class="line">  质能守恒方程可以用一个很简洁的方程式 &#96;$E &#x3D; m c^2 $&#96;来表达。 </span><br><span class="line"></span><br><span class="line">#### 分隔线  </span><br><span class="line">可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。</span><br><span class="line">也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线： </span><br><span class="line">代码:</span><br></pre></td></tr></table></figure></td><td></td><td></td></tr></tbody></table></li></ol><hr><hr><hr><hr><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">显示效果都一样：  </span><br><span class="line">* * *</span><br><span class="line">***</span><br><span class="line">*****</span><br><span class="line">- - -</span><br><span class="line">-----------  </span><br><span class="line"></span><br><span class="line">#### 转义字符  </span><br><span class="line"></span><br><span class="line">- MarkDown中的转义字符\  </span><br><span class="line"></span><br><span class="line">代码:</span><br></pre></td></tr></table></figure><p>*<br>**<br>-<br>&gt;<br>[]<br>()</p><pre><code>效果如下:  \*  \*\*  \-  \&gt;  \[\]  \(\)  #### 特殊字  html中包含一系列字符实体（特殊符号），利用转义字符可以将这些在html中具有特殊语法含义的字符作为普通字符输出。|特殊字符|描述|字符代码|实体编号||:----:|:----:|:----:|:----:|| |空格符|`&amp;nbsp;`|`&amp;#160;`||&lt;|小于号|`&amp;lt;`|`&amp;#60;`||&amp;gt;|大于号|`&amp;gt;`|`&amp;#62;`||&amp;|和号|`&amp;amp;`|`&amp;#38;`||¥|人民币|`&amp;yen;`|`&amp;#165;`||£|英镑|`&amp;pound;`|`&amp;#163;`||©|版权|`&amp;copy;`|`&amp;#169;`||®|注册商标|`&amp;reg;`|`&amp;#174;`||℃|摄氏度|`&amp;deg;C`|||±|正负号|`&amp;plusmn;`|||×|乘号|`&amp;times;`|`&amp;#215;`||÷|除号|`&amp;divide;`|`&amp;#247;`||²|平方|`&amp;sup2;`||³|立方|`&amp;sup3;`|  [1]:http://www.google.com [2]:http://www.leanote.com  </code></pre>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;java基础&#39;</title>
      <link href="/2020/05/08/java%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/05/08/java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="java概述"><a href="#java概述" class="headerlink" title="java概述"></a>java概述</h3><h3 id="什么是java"><a href="#什么是java" class="headerlink" title="什么是java"></a>什么是java</h3><p>Java是一门面向对象编程语言，由詹姆斯·高斯林等开发，由Sun公司持有后被oracle公司收购，<br>不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，<br>因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，<br>极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程。<br>具有：</p><ul><li>简单性</li><li>面向对象</li><li>分布式</li><li>健壮性</li><li>安全性</li><li>平台独立与可移植性</li><li>多线程</li><li>动态性<br>等特点。  </li></ul><hr><h3 id="跨平台及其原理"><a href="#跨平台及其原理" class="headerlink" title="跨平台及其原理"></a>跨平台及其原理</h3><p>跨平台是java的核心优势，即java语言编写的程序，一次编译后，可以在多个系统平台上运行。</p><p><img src="/" class="lazyload" data-src="/images/005.png"  alt="">  </p><h4 id="java运行过程"><a href="#java运行过程" class="headerlink" title="java运行过程"></a>java运行过程</h4><ul><li>java程序的运行分为两步：先编译再解释执行  </li><li>通过“编译器”将Java源程序编译成java字节码文件（.class）(字节码文件采用结构中立<br>的中间文件格式)  </li><li>通过不同的“虚拟机”将Java字节码文件解释为对应机器语言并执行  <blockquote><p>Java源代码—-&gt;编译器—-&gt;jvm可执行的Java字节码(即虚拟指令)—-&gt;jvm—-&gt;jvm中解释器—–&gt;机器可执行的二进制机器码—-&gt;程序运行。</p></blockquote></li></ul><h4 id="java跨平台和C跨平台的区别"><a href="#java跨平台和C跨平台的区别" class="headerlink" title="java跨平台和C跨平台的区别"></a>java跨平台和C跨平台的区别</h4><ul><li>Java：一次编译，到处运行 C：多次编译，到处运行</li><li>在互联网情况下，平台各异，Java的跨平台更具有优势</li><li>Java可以跨所有平台吗：要看有没有提供并安装相应的虚拟机</li><li>Java的运行速度没有C语言快</li><li>Java需要将class文件解释成机器码再执行；C执行执行机器码  </li></ul><h4 id="字节码文件bytecode"><a href="#字节码文件bytecode" class="headerlink" title="字节码文件bytecode"></a>字节码文件bytecode</h4><ul><li>.class文件 二进制文件</li><li>格式中立、平台无关的二进制文件</li><li>是编译的产物，是解释的原料  </li></ul><h4 id="Java虚拟机-JVM"><a href="#Java虚拟机-JVM" class="headerlink" title="Java虚拟机 JVM"></a>Java虚拟机 JVM</h4><ul><li>JVM是Java Virtual Machine（Java虚拟机）的缩写</li><li>JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿<br>真模拟各种计算机功能来实现的。</li><li>JVM就是一个虚拟的用于执行bytecodes字节码的计算机</li><li>Java虚拟机是Java最核心技术，也是跨平台的基础。</li><li>Java语言使用Java虚拟机屏蔽了与具体平台相关的信息，使得Java语言编译程序只需生成在<br>Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。</li><li>Java虚拟机在执行字节码时，把字节码解释成具体平台上的机器指令执行。<br>这就是Java的能够“一次编译，到处运行”的原因  </li></ul><h4 id="JDK、JRE、JVM的区别联系"><a href="#JDK、JRE、JVM的区别联系" class="headerlink" title="JDK、JRE、JVM的区别联系"></a>JDK、JRE、JVM的区别联系</h4><p>JVM&amp;JRE&amp;JDK关系图</p><p><img src="/" class="lazyload" data-src="/images/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0pvdXJXb24vaW1hZ2UvbWFzdGVyL0phdmElRTclQUUlODAlRTQlQkIlOEIvSlZNJkpSRSZKREslRTUlODUlQjMlRTclQjMlQkIlRTUlOUIlQkUucG5n.png"  alt=""></p><ul><li>JDK:   <ul><li>Java Development Kit</li><li>针对Java开发员的产品</li></ul></li><li>JRE:<ul><li>Java Runtime Environment</li><li>是运行Java程序所必须的环境集合</li></ul></li><li>JVM<ul><li>Java Virtual Machine</li><li>解释运行Java字节码文件，跨平台的核心</li></ul></li><li>联系：JDK 包含JRE，JRE包含JVM。</li></ul><hr><h3 id="Java开发之前的准备"><a href="#Java开发之前的准备" class="headerlink" title="Java开发之前的准备"></a>Java开发之前的准备</h3><p>正式开发之前必须要安装jdk，我使用的是jdk8.0，现在已经出到jdk14.0了，以后再尝试新的版本。<br><a href="https://www.oracle.com/technetwork/java/javase/overview/index.html" target="_blank" rel="noopener">oracle官网下载</a><br><img src="/" class="lazyload" data-src="/images/006.png"  alt="">  </p><p>在jdk安装完之后，需要配置java环境变量  </p><ul><li>Java_HOME：C:\Program Files\Java\jdk1.6.0_14</li><li>path（执行dos命令，系统会在path指定的路径中寻找该命令对应的可执行文件）</li><li>将 “%Java_HOME%\bin” 增加到path中；多个目录用分号隔开。</li><li>classpath</li><li>JDK5.0以上版本，可以不对其进行配置！  </li></ul><p>配置完java环境变量后，需要重启DOS窗口。重启后新配置的环境变量才能生效。</p><p>安装完jdk，需要验证：  </p><blockquote><p>java -version  </p></blockquote><p>结果如图：<br><img src="/" class="lazyload" data-src="/images/001/001.png"  alt="">  </p><hr><h3 id="第一个程序"><a href="#第一个程序" class="headerlink" title="第一个程序"></a>第一个程序</h3><p>我使用的是IDEA软件，使用的确要比eclipse要好一些，比如：界面，智能辅助等功能。除了有点耗电脑<br>网上也有相关安装教程，有兴趣的可以试试。比如这篇教程：<a href="https://www.jianshu.com/p/77f81d5fcf02" target="_blank" rel="noopener">https://www.jianshu.com/p/77f81d5fcf02</a>  </p><p>HelloWorld.java 编写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后右键 -&gt; run 程序，结果打印输出在下方 terminal 终端。  </p><hr><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><h4 id="java关键字（共53个）"><a href="#java关键字（共53个）" class="headerlink" title="java关键字（共53个）"></a>java关键字（共53个）</h4><ul><li>访问修饰符： </li></ul><table><thead><tr><th align="center">关键字</th><th align="center">意思</th><th align="center">备注，常用</th></tr></thead><tbody><tr><td align="center">public</td><td align="center">公有的</td><td align="center">可跨包使用</td></tr><tr><td align="center">protected</td><td align="center">受保护的</td><td align="center">当前包内可用</td></tr><tr><td align="center">private</td><td align="center">私有的</td><td align="center">仅当前类可用</td></tr><tr><td align="center">default（什么也不写）</td><td align="center">默认的</td><td align="center">同一包内可见，不使用任何修饰符</td></tr></tbody></table><ul><li>修饰方法、类、属性和变量（9个）</li></ul><table><thead><tr><th align="center">关键字</th><th align="center"></th><th align="center">备注，常用</th></tr></thead><tbody><tr><td align="center">static</td><td align="center"></td><td align="center">主要用来修饰成员变量和成员方法<br>目的是为了在不创建对象的前提下来调用方法/变量。</td></tr><tr><td align="center">final</td><td align="center"></td><td align="center">使用final修饰类则该类不能被继承，<br>l修饰变量的值不能做再次更改，即不能重新赋值</td></tr><tr><td align="center">super</td><td align="center"></td><td align="center">使用super来引用父类的成分</td></tr><tr><td align="center">this</td><td align="center">调用当前对象</td><td align="center"></td></tr><tr><td align="center">native</td><td align="center"></td><td align="center">用来声明一个方法是由与计算机相关的语言（如C/C++/FORTRAN语言）实现的</td></tr><tr><td align="center">strictfp</td><td align="center"></td><td align="center">用来声明FP_strict（单精度或双精度浮点数）表达式遵循IEEE 754算术规范</td></tr><tr><td align="center">synchronized</td><td align="center"></td><td align="center">表明一段代码需要同步执行</td></tr><tr><td align="center">transient</td><td align="center"></td><td align="center">声明不用序列化的成员域</td></tr><tr><td align="center">volatile</td><td align="center"></td><td align="center">表明两个或者多个变量必须同步地发生变化</td></tr></tbody></table><ul><li>定义类、接口、抽象类和实现接口、继承类的关键字、实例化对象（6个）</li></ul><table><thead><tr><th align="center">关键字</th><th align="center">意思</th><th align="center">备注，常用</th></tr></thead><tbody><tr><td align="center">class</td><td align="center">类</td><td align="center">声明一个类</td></tr><tr><td align="center">interface</td><td align="center">接口</td><td align="center">声明一个接口</td></tr><tr><td align="center">abstract</td><td align="center">抽声明象</td><td align="center">表明类或者成员方法具有抽象属性</td></tr><tr><td align="center">implements</td><td align="center">实现</td><td align="center">表明一个类实现了给定的接口</td></tr><tr><td align="center">extends</td><td align="center">继承</td><td align="center">表明一个类型是另一个类型的子类型，这里常见的类型有类和接口</td></tr><tr><td align="center">new</td><td align="center">创建新的对象</td><td align="center">用来创建新实例对象</td></tr></tbody></table><ul><li>包的关键字（2个）</li></ul><table><thead><tr><th align="center">关键字</th><th align="center"></th><th align="center">备注，常用</th></tr></thead><tbody><tr><td align="center">import</td><td align="center"></td><td align="center">表明要访问指定的类或包</td></tr><tr><td align="center">package</td><td align="center"></td><td align="center">包</td></tr></tbody></table><ul><li>数据类型的关键字（12个）</li></ul><table><thead><tr><th align="center">关键字</th><th align="center">意思</th><th align="center">备注，常用</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">字节型</td><td align="center">8bit</td></tr><tr><td align="center">char</td><td align="center">字符型</td><td align="center">16bit</td></tr><tr><td align="center">boolean</td><td align="center">布尔型</td><td align="center"><a href="https://blog.csdn.net/YuanMxy/article/details/74170745" target="_blank" rel="noopener">大小</a></td></tr><tr><td align="center">short</td><td align="center">短整型</td><td align="center">16bit</td></tr><tr><td align="center">int</td><td align="center">整型</td><td align="center">32bit</td></tr><tr><td align="center">long</td><td align="center">长整型</td><td align="center">64bit</td></tr><tr><td align="center">float</td><td align="center">单精度浮点型</td><td align="center">32bit</td></tr><tr><td align="center">double</td><td align="center">双精度浮点型</td><td align="center">64bit</td></tr><tr><td align="center">void</td><td align="center">无返回</td><td align="center">–</td></tr><tr><td align="center">null</td><td align="center">空值</td><td align="center">–</td></tr><tr><td align="center">true</td><td align="center">真</td><td align="center">–</td></tr><tr><td align="center">false</td><td align="center">假</td><td align="center">–</td></tr></tbody></table><ul><li>条件循环（12个）</li></ul><table><thead><tr><th align="center">关键字</th><th align="center">意思</th><th align="center"></th></tr></thead><tbody><tr><td align="center">if</td><td align="center"></td><td align="center">条件语句的引导词</td></tr><tr><td align="center">else</td><td align="center"></td><td align="center">用在条件语句中，表明当条件不成立时的分支</td></tr><tr><td align="center">while</td><td align="center"></td><td align="center">用在循环结构中</td></tr><tr><td align="center">for</td><td align="center"></td><td align="center">一种循环结构的引导词</td></tr><tr><td align="center">switch</td><td align="center"></td><td align="center">分支语句结构的引导词</td></tr><tr><td align="center">case</td><td align="center"></td><td align="center">用在switch语句之中，表示其中的一个分支</td></tr><tr><td align="center">default</td><td align="center"></td><td align="center">默认，例如，用在switch语句中，表明一个默认的分支</td></tr><tr><td align="center">do</td><td align="center"></td><td align="center">用在do-while循环结构中</td></tr><tr><td align="center">break</td><td align="center"></td><td align="center">提前跳出一个块</td></tr><tr><td align="center">continue</td><td align="center"></td><td align="center">回到一个块的开始处</td></tr><tr><td align="center">return</td><td align="center"></td><td align="center">从成员方法中返回数据</td></tr><tr><td align="center">instanceof</td><td align="center"></td><td align="center">用来测试一个对象是否是指定类型的实例对象</td></tr></tbody></table><ul><li>错误处理（5个）</li></ul><table><thead><tr><th align="center">关键字</th><th align="center">意思</th><th align="center"></th></tr></thead><tbody><tr><td align="center">catch</td><td align="center"></td><td align="center">用在异常处理中，用来捕捉异常</td></tr><tr><td align="center">try</td><td align="center"></td><td align="center">尝试一个可能抛出异常的程序块</td></tr><tr><td align="center">finally</td><td align="center"></td><td align="center">用于处理异常情况，用来声明一个基本肯定会被执行到的语句块</td></tr><tr><td align="center">throw</td><td align="center"></td><td align="center">抛出一个异常</td></tr><tr><td align="center">throws</td><td align="center"></td><td align="center">声明在当前定义的成员方法中所有需要抛出的异常</td></tr></tbody></table><ul><li>保留字</li></ul><table><thead><tr><th align="center">关键字</th><th align="center">意思</th><th align="center"></th></tr></thead><tbody><tr><td align="center">const</td><td align="center"></td><td align="center">用于修改字段或局部变量的声明。它指定字段或局部变量的值是常数，不能被修改</td></tr><tr><td align="center">goto</td><td align="center"></td><td align="center">指定跳转到标签，找到标签后，程序将处理从下一行开始的命令。</td></tr></tbody></table><hr><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>Java语言是强类型语言，对于每一种数据都定义了明确的具体的数据类型，在内存中分配了不同大小的内存空间。  </p><p>分类：</p><ul><li><p>基本数据类型</p><ul><li><p>数值型</p><ul><li>整数类型(byte,short,int,long)</li><li>浮点类型(float,double)</li></ul></li><li><p>字符型(char)</p></li><li><p>布尔型(boolean)</p></li></ul></li><li><p>引用数据类型</p><ul><li>类(class)</li><li>接口(interface)</li><li>数组([])   </li></ul></li></ul><table><thead><tr><th align="center">类型</th><th align="center">类型名称</th><th align="center">关键字</th><th align="center">占用内存</th><th align="center">取值范围</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center">整形</td><td align="center">字节型</td><td align="center">byte</td><td align="center">1字节</td><td align="center">-128<del>127  -2^7</del>2^7-1</td><td align="center">0</td></tr><tr><td align="center">整形</td><td align="center">短整型</td><td align="center">short</td><td align="center">2字节</td><td align="center">-32768<del>32767  -2^15</del>2^15-1</td><td align="center">0</td></tr><tr><td align="center">整形</td><td align="center">整型</td><td align="center">int</td><td align="center">4字节</td><td align="center">-2^31~2^31-1</td><td align="center">0</td></tr><tr><td align="center">整形</td><td align="center">长整型</td><td align="center">long</td><td align="center">8字节</td><td align="center">-2^63~2^63-1</td><td align="center">0L</td></tr><tr><td align="center">浮点型</td><td align="center">单精度浮点型</td><td align="center">float</td><td align="center">4字节</td><td align="center">-3.043E38~3.043E38</td><td align="center">0.0F</td></tr><tr><td align="center">浮点型</td><td align="center">双精度浮点型</td><td align="center">double</td><td align="center">8字节</td><td align="center">-1.798E308~1.798E308</td><td align="center">0.0D</td></tr><tr><td align="center">字符型</td><td align="center">字符型</td><td align="center">char</td><td align="center">2字节</td><td align="center">一个字符，如’a’,’A’,’家’</td><td align="center">‘\u0000’</td></tr><tr><td align="center">布尔型</td><td align="center">布尔型</td><td align="center">boolean</td><td align="center">1字节</td><td align="center">true或者false</td><td align="center">false</td></tr></tbody></table><hr><h4 id="常量和变量"><a href="#常量和变量" class="headerlink" title="常量和变量"></a>常量和变量</h4><p>定义：</p><blockquote><p>在程序中存在大量的数据来代表程序的状态，其中有些数据在程序的运行过程中值会发生改变，<br>有些数据在程序运行过程中值不能发生改变，这些数据在程序中分别被叫做变量和常量。</p></blockquote><p>Java是一种强类型语言，每个变量都必须声明其类型。<br>Java变量是程序中最基本的存储单元，其要素包括变量名，变量类型和作用域。<br>变量在使用前必须对其声明, 只有在变量声明以后，才能为其分配相应长度的存储单元，<br>声明格式为：  </p><blockquote><p>type varName [=value] [{,varName[=value]}] ；  </p></blockquote><p>注意事项：</p><blockquote><p>1.每个变量都有类型，类型可以是基本类型，也可以是引用类型。<br>2.变量名必须是合法的标识符。  </p></blockquote><p>变量声明举例：  </p><blockquote><p>double salary;<br>  boolean done;<br>  long earthPopulation;<br>  int age;   </p></blockquote><p>可以将变量的声明和初始化放在同一行中，例如：</p><blockquote><p>int age = 18;<br>float e = 2.718281828f;   </p></blockquote><h5 id="整型数据类型"><a href="#整型数据类型" class="headerlink" title="整型数据类型"></a>整型数据类型</h5><p>整型常量：</p><ul><li><p>十进制整数，如：99, -500, 0</p></li><li><p>八进制整数，要求以 0 开头，如：015</p></li><li><p>十六进制数，要求 0x 或 0X 开头，如：0x15  </p><p>整型变量：  </p><table><thead><tr><th align="center">类型</th><th align="center">占用空间</th><th align="center">表述范围</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">1字节</td><td align="center">-128~127</td></tr><tr><td align="center">short</td><td align="center">2字节</td><td align="center">-2^15~2^15-1</td></tr><tr><td align="center">int(integer)</td><td align="center">4字节</td><td align="center">-2^31~2^31-1（约21亿）</td></tr><tr><td align="center">long</td><td align="center">8字节</td><td align="center">-2^63~2^63-1</td></tr></tbody></table><h5 id="浮点型数据类型"><a href="#浮点型数据类型" class="headerlink" title="浮点型数据类型"></a>浮点型数据类型</h5><p>浮点类型常量：</p><ul><li>十进制数形式，例如: <blockquote><p>3.14 314.0 0.314  </p></blockquote></li></ul></li></ul><p>科学记数法形式，如:</p><blockquote><p>314e2 314E2 314E-2<br>double f = 314e2; //314<em>10^2–&gt;31400.0<br>double f2 = 314e-2; //314</em>10^(-2)–&gt;3.14  </p></blockquote><p>浮点型变量:  </p><ul><li>float类型：单精度类型，尾数可以精确到7位有效数字，在很多情况下，float类型的精度很难满足需求。</li><li>double类型：双精度类型 精度是float类型的两倍，绝大部分应用程序都采用double类型。  </li></ul><table><thead><tr><th align="center">类型</th><th align="center">占用空间</th><th align="center">表述范围</th></tr></thead><tbody><tr><td align="center">float</td><td align="center">4字节</td><td align="center">-3.043E38~3.043E38</td></tr><tr><td align="center">double</td><td align="center">8字节</td><td align="center">-1.798E308~1.798E308</td></tr></tbody></table><p>注意：</p><ul><li>浮点常量默认为double。要变为float，需在后面增加F/f. 如： 3.14F</li><li>浮点数存在舍入误差，很多数字不能精确表示。如果需要进行不产生舍入误差的精确数字计算，需要使用<br>BigDecimal类。  </li></ul><h5 id="字符数据类型（2个字节）"><a href="#字符数据类型（2个字节）" class="headerlink" title="字符数据类型（2个字节）"></a>字符数据类型（2个字节）</h5><p>单引号用来表示字符常量。例如‘A’是一个字符，它与“A”是不同的，“A”表示含有一个字符的字符串。<br>char 类型用来表示在Unicode编码表中的字符。<br>Unicode编码被设计用来处理各种语言的所有文字，它占2个字节，可允许有65536个字符；ASCII码占1个字节，可允许<br>有128个字符（最高位是0），是Unicode编码表中前128个字符。<br>Java 语言中还允许使用转义字符 ‘\’ 来将其后的字符转变为其它的含义，<br>char c2 = ‘\n’; //代表换行符<br>char类型在内存中存储的是该字符的Unicode编码值，所以char类型可以当做int类型来处理  </p><table><thead><tr><th align="center">转义符</th><th align="center">含义</th><th align="center">Unicode值</th></tr></thead><tbody><tr><td align="center">\b</td><td align="center">退格(backspace)</td><td align="center">\u0008</td></tr><tr><td align="center">\n</td><td align="center">换行</td><td align="center">\u000a</td></tr><tr><td align="center">\r</td><td align="center">回车</td><td align="center">\u000d</td></tr><tr><td align="center">\t</td><td align="center">制表符(tab)</td><td align="center">\u0009</td></tr><tr><td align="center">&quot;</td><td align="center">双引号</td><td align="center">\u0022</td></tr><tr><td align="center">&#39;</td><td align="center">单引号</td><td align="center">\u0027</td></tr><tr><td align="center">\</td><td align="center">反斜杠</td><td align="center">\u005c</td></tr></tbody></table><h5 id="布尔数据类型（一位，不是一个字节）"><a href="#布尔数据类型（一位，不是一个字节）" class="headerlink" title="布尔数据类型（一位，不是一个字节）"></a>布尔数据类型（一位，不是一个字节）</h5><p>boolean类型有两个值，true和false  </p><p>boolean 类型用来判断逻辑条件，一般用于程序流程控制  </p><p>请不要这样写：<code>if ( is == true &amp;&amp; done == false )</code> ，一般去掉所有的<code>== false 和 ==true</code>,<br>使用 <code>if ( whether &amp;&amp; !done )</code>。  </p><h5 id="final-常量"><a href="#final-常量" class="headerlink" title="final 常量"></a>final 常量</h5><p>使用final修饰的变量，只能被初始化一次，变成了常量。  </p><h5 id="命名规则-规范"><a href="#命名规则-规范" class="headerlink" title="命名规则(规范)"></a>命名规则(规范)</h5><p>所有变量、方法、类名：见名知意  </p><p>变量、方法名：</p><ul><li>首字母小写和驼峰原则</li><li>run(), runRun(), age ageNew monthSalary  </li></ul><p>常量：</p><ul><li>大写字母和下划线：MAX_VALUE  </li></ul><p>类名：</p><ul><li>首字母大写和驼峰原则: Man, GoodMan  </li></ul><h5 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h5><p>java语言支持如下运算符：</p><ul><li>算术运算符: +，-，*，/，%，++，– </li><li>赋值运算符 =</li><li>扩展赋值运算符:+=，-=，*=，/=</li><li>关系运算符: &gt;，&lt;，&gt;=，&lt;=，==，!=</li><li>逻辑运算符: &amp;&amp;，||，! </li><li>位运算符: &amp;，|，^，~ ， &gt;&gt;，&lt;&lt;，&gt;&gt;&gt; (了解！！！) </li><li>条件运算符 ？：  </li></ul><p>注意：</p><ul><li>1：/ 除 6/4=1 6/4.0=1.5</li><li>2: %取模(求余) 6%4=2</li><li>3：+  6+‘a’=103 6+“a“=6ª</li><li>4：++ a=2;b=++a+9; a=2;b=a+++9; </li><li>5：+  字符串相加，只要有一个操作数是字符串，自动变为字符串相连  </li></ul><p>算术运算符:  </p><table><thead><tr><th align="center">运算符</th><th align="center">运算</th><th align="center">范例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">正号</td><td align="center">+3</td><td align="center">3</td></tr><tr><td align="center">-</td><td align="center">负号</td><td align="center">b=4;-b</td><td align="center">-4</td></tr><tr><td align="center">+</td><td align="center">加</td><td align="center">5+5</td><td align="center">10</td></tr><tr><td align="center">-</td><td align="center">减</td><td align="center">6-4</td><td align="center">2</td></tr><tr><td align="center">*</td><td align="center">乘</td><td align="center">3*4</td><td align="center">12</td></tr><tr><td align="center">/</td><td align="center">除</td><td align="center">5/5</td><td align="center">1</td></tr><tr><td align="center">%</td><td align="center">取模</td><td align="center">5%5</td><td align="center">0</td></tr><tr><td align="center">++</td><td align="center">自增（前）</td><td align="center">a=2;b=++a</td><td align="center">a=3;b=3</td></tr><tr><td align="center">++</td><td align="center">自增（后）</td><td align="center">a=2;b=a++</td><td align="center">a=3;b=2</td></tr><tr><td align="center">–</td><td align="center">自减（前）</td><td align="center">a=2;b=–a</td><td align="center">a=1;b=1</td></tr><tr><td align="center">–</td><td align="center">自减（后）</td><td align="center">a=2;b=a–</td><td align="center">a=1;b=2</td></tr><tr><td align="center">+</td><td align="center">字符串相加</td><td align="center">“he”+”llo”</td><td align="center">“hello”</td></tr></tbody></table><p>赋值运算符:  </p><table><thead><tr><th align="center">运算符</th><th align="center">运算</th><th align="center">范例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">=</td><td align="center">赋值</td><td align="center">a=3;b=2</td><td align="center">a=3;b=2</td></tr><tr><td align="center">+=</td><td align="center">加等于</td><td align="center">a=3;b=2;a+=b</td><td align="center">a=5;b=2</td></tr><tr><td align="center">-=</td><td align="center">减等于</td><td align="center">a=3;b=2;a-=b</td><td align="center">a=1;b=2</td></tr><tr><td align="center">*=</td><td align="center">乘等于</td><td align="center">a=3;b=2;a*=b</td><td align="center">a=6;b=2</td></tr><tr><td align="center">/=</td><td align="center">除等于</td><td align="center">a=3;b=2;a/=b</td><td align="center">a=1;b=2</td></tr><tr><td align="center">%=</td><td align="center">模等于</td><td align="center">a=3;b=2;a%=b</td><td align="center">a=1;b=2</td></tr></tbody></table><p>关系运算符: </p><p>关系运算符用来进行比较运算<br>关系运算的结果是布尔值：true/false<br>注意:</p><ul><li>区分==和=</li><li>不等于是！=不是&lt;&gt;  </li></ul><table><thead><tr><th align="center">运算符</th><th align="center">运算</th><th align="center">范例</th><th align="center"></th></tr></thead><tbody><tr><td align="center">==</td><td align="center">等于</td><td align="center">a==b</td><td align="center"></td></tr><tr><td align="center">!=</td><td align="center">不等于</td><td align="center">a!=b</td><td align="center"></td></tr><tr><td align="center">&gt;</td><td align="center">大于</td><td align="center">a&gt;b</td><td align="center"></td></tr><tr><td align="center">&lt;</td><td align="center">小于</td><td align="center">a&lt;b</td><td align="center"></td></tr><tr><td align="center">&gt;=</td><td align="center">大于等于</td><td align="center">a&gt;=b</td><td align="center"></td></tr><tr><td align="center">&lt;=</td><td align="center">小于等于</td><td align="center">a&lt;=b</td><td align="center"></td></tr></tbody></table><p>逻辑运算符:  </p><p>逻辑运算符与布尔操作数一起使用，组成逻辑表达式<br>逻辑表达式的结果是布尔值<br>&amp;和&amp;&amp;的区别:  </p><ul><li>“&amp;”:无论任何情况，“&amp;”两边的表达式都<br>会参与计算。</li><li>“&amp;&amp;”: 当“&amp;&amp;”的左边为false，则将不会计<br>算其右边的表达式。即左false则false </li></ul><p>“|”和“||”的区别与“&amp;”和“&amp;&amp;”的区别类似。</p><table><thead><tr><th align="center">运算符</th><th align="center">运算</th><th align="center">范例</th><th align="center"></th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="center">逻辑与</td><td align="center">A &amp; B</td><td align="center"></td></tr><tr><td align="center">&#124;</td><td align="center">逻辑或</td><td align="center">A &#124; B</td><td align="center"></td></tr><tr><td align="center">^</td><td align="center">逻辑异或</td><td align="center">A ^ B</td><td align="center"></td></tr><tr><td align="center">!</td><td align="center">逻辑反</td><td align="center">! A</td><td align="center"></td></tr><tr><td align="center">&#124;&#124;</td><td align="center">短路或</td><td align="center">A &#124;&#124; B</td><td align="center"></td></tr><tr><td align="center">&amp;&amp;</td><td align="center">短路与</td><td align="center">A &amp;&amp; B</td><td align="center"></td></tr></tbody></table><p>位运算符（了解）：  </p><p>位运算符是对操作数以二进制比特位为单位进行操作和运算，操作数和结果都是整型数。<br>如果操作的对象是char、byte、short，位移动作发生前其值会自动晋升为int，运算结果<br>也为int  </p><table><thead><tr><th align="center">运算符</th><th align="center">运算</th><th align="center">范例</th><th align="center"></th></tr></thead><tbody><tr><td align="center">~</td><td align="center">按位非（NOT）/取反</td><td align="center">b = ~a</td><td align="center"></td></tr><tr><td align="center">&amp;</td><td align="center">按位与（AND）</td><td align="center">c = a &amp; b</td><td align="center"></td></tr><tr><td align="center">&#124;</td><td align="center">按位或（OR）</td><td align="center">c = a &#124; b</td><td align="center"></td></tr><tr><td align="center">^</td><td align="center">按位异或(相同为0相异为1)</td><td align="center">c = a ^ b</td><td align="center"></td></tr><tr><td align="center">&gt;&gt;</td><td align="center">右移；左边空位补最高位即符号位</td><td align="center">b = a &gt;&gt; 2</td><td align="center"></td></tr><tr><td align="center">&gt;&gt;&gt;</td><td align="center">无符号右移，左边空位补0</td><td align="center">b = a &gt;&gt;&gt; 2</td><td align="center"></td></tr><tr><td align="center">&lt;&lt;</td><td align="center">左移；右边空位以补0</td><td align="center">b = a &lt;&lt; 1</td><td align="center"></td></tr></tbody></table><p>条件运算符:</p><p>语法格式:</p><blockquote><p>x ? y : z<br>唯一的三目运算符  </p></blockquote><p>执行过程:</p><ul><li>其中 x 为 boolean 类型表达式，先计算 x 的值，若为true，则整个三目运算的结果为表达式 y 的<br>值，否则整个运算结果为表达式 z 的值。  </li></ul><p>经常用来代替简单的if-else判断！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int a&#x3D;3;</span><br><span class="line">int b&#x3D;5;</span><br><span class="line">String str&#x3D; &quot;&quot;;</span><br><span class="line">if(a&lt;b)&#123;</span><br><span class="line">str &#x3D; &quot;a&lt;b&quot;;</span><br><span class="line">&#125;else&#123;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int a&#x3D;3;</span><br><span class="line">int b&#x3D;5;</span><br><span class="line">String str&#x3D; (a&lt;b)?&quot;a&lt;b&quot;:&quot;a&gt;b&quot;;</span><br></pre></td></tr></table></figure><p>运算符的优先级:</p><blockquote><p>赋值&lt;三目&lt;逻辑&lt;关系&lt;算术&lt;单目  </p></blockquote><p>基本数据类型之间的转换:</p><ul><li><p>在赋值运算或算术运算时，要求数据类型相同，否则要进行类型转换  </p></li><li><p>转换方式：</p><ul><li><p>自动转换:<br>自动类型转换（左&gt;右）  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">byte b&#x3D;10;</span><br><span class="line">System.out.println(&quot;b&#x3D;&quot;+b);</span><br><span class="line">int n &#x3D; b;</span><br><span class="line">System.out.println(&quot;n&#x3D;&quot;+n);</span><br></pre></td></tr></table></figure><blockquote><p>00001010(byte 10) –&gt; 00000000 00000000 00000000 00001010 (int 10)  </p></blockquote><p>类型转换的方向:</p><blockquote><p>低——————————————————&gt;高<br>byte —&gt; short,char—&gt;int —&gt;long—&gt;float —&gt;double</p></blockquote></li><li><p>强制转换:<br>强制类型转换（左&lt;右）<br>强转时，当心丢失数据或失真  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">     int n&#x3D;270;</span><br><span class="line">     System.out.println(&quot;n&#x3D;&quot;+n);</span><br><span class="line">     byte b &#x3D; (byte) n;</span><br><span class="line">     System.out.println(“b&#x3D;”+b);</span><br><span class="line">     &#96;&#96;&#96;  </span><br><span class="line">     &gt;00000000 00000000 00000001 0000001110(int 270) --&gt; 0000001110(byte 14)  </span><br><span class="line">     </span><br><span class="line">     当将一种类型强制转换成另一种类型，而又超出了目标类型的表示范围，就会被截断成为一个</span><br><span class="line">     完全不同的值。</span><br><span class="line"> </span><br><span class="line"> - 除boolean类型外，所有的基本数据类型因为各自的精度不同，赋值时都要考虑这个问题  </span><br><span class="line"></span><br><span class="line"> - 算术运算时的转换  </span><br><span class="line">   </span><br><span class="line">   - 整型,浮点型,字符型数据可以混合运算。</span><br><span class="line">   - 运算中相邻两个操作数先转化为同一类型，转换从低级到高级，然后进行运算；运算的结果再</span><br><span class="line">     和下一个操作数据进行运算，规则相同</span><br><span class="line">   - 类型转换的方向</span><br><span class="line">   </span><br><span class="line">     &gt; 低------------------------------------------------------&gt;高  </span><br><span class="line">     &gt; byte —&gt; short,char—&gt;int —&gt;long—&gt;float —&gt;double</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">#### 流程控制语句  </span><br><span class="line"></span><br><span class="line">流程控制语句是用来控制程序中各语句执行顺序的语句，可以把语句组合成能完成一定</span><br><span class="line">功能的小逻辑模块。  </span><br><span class="line">其流程控制方式采用结构化程序设计中规定的三种基本流程结构，即：顺序结构、分支</span><br><span class="line">结构和循环结构，如下图所示：  </span><br><span class="line"></span><br><span class="line">![](&#x2F;images&#x2F;001&#x2F;002.png)  </span><br><span class="line"></span><br><span class="line">##### if-else结构  </span><br><span class="line"></span><br><span class="line">1.if单分支选择结构  </span><br><span class="line"></span><br><span class="line">if语句对条件表达式进行一次测试，若测试为真，则执行下面的语句，否则跳过该语句  </span><br><span class="line">示例：</span><br></pre></td></tr></table></figure><p>double i = 6 * Math.random();<br>double j = 6 * Math.random();<br>double k = 6 * Math.random();<br>int count = (int) (i + j + k);<br>if(count &gt; 15 ) {<br>System.out.println(“今天手气不错”);<br>}<br>if(count &gt;= 10 &amp;&amp; count &lt;= 15) { //错误写法：10&lt;count&lt;15<br>System.out.println(“今天手气很一般”);<br>}<br>if(count &lt; 10) {<br>System.out.println(“今天手气不怎么样”);<br>}<br>System.out.println(“得了” + count + “分”); 要求必须是布尔表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2.if-else双分支选择结构  </span><br><span class="line"></span><br><span class="line">当条件表达式为真时，执行语句块1，否则，执行语句块2。也就是else部分  </span><br><span class="line"></span><br><span class="line">示例：</span><br></pre></td></tr></table></figure><p>double r = 4 * Math.random();<br>double area = Math.PI * Math.pow(r, 2);<br>double circle = 2 * Math.PI * r;<br>System.out.println(“半径为： ” + r);<br>System.out.println(“面积为： ” + area);<br>System.out.println(“周长为： ” + circle);<br>if(area &gt;= circle) {<br>System.out.println(“面积大于等于周长”);<br>} else {<br>System.out.println(“周长大于面积”);<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3.if-else多分支选择结构  </span><br><span class="line"></span><br><span class="line">逐条if语句进行判断:</span><br><span class="line"> </span><br><span class="line"> - 条件匹配，进入语句体</span><br><span class="line"> - 否则对if语句继续匹配  </span><br><span class="line"> </span><br><span class="line">表达式：</span><br><span class="line">&gt; if(布尔表达式1) &#123;  </span><br><span class="line">     语句块1；  </span><br><span class="line">  &#125; else if(布尔表达式2) &#123;   </span><br><span class="line">     语句块2；  </span><br><span class="line">  &#125;………  </span><br><span class="line">  else if(布尔表达式n)&#123;   </span><br><span class="line">     语句块n;   </span><br><span class="line">  &#125; else &#123;   </span><br><span class="line">     语句块n+1;   </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>int age = (int) (100 * Math.random());<br>System.out.print(“年龄是” + age + “, 属于”);<br>if (age &lt; 15) {<br>System.out.println(“儿童, 喜欢玩！”);<br>} else if (age &lt; 25) {<br>System.out.println(“青年, 要学习！”);<br>} else if (age &lt; 45) {<br>System.out.println(“中年, 要工作！”);<br>} else if (age &lt; 65) {<br>System.out.println(“中老年, 要补钙！”);<br>} else if (age &lt; 85) {<br>System.out.println(“老年, 多运动！”);<br>} else {</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### switch多分支选择结构  </span><br><span class="line"></span><br><span class="line">根据表达式值的不同执行许多不同的操作:  </span><br><span class="line">&gt; switch (表达式) &#123;  </span><br><span class="line">&gt; case 值1 :  </span><br><span class="line">&gt; &amp;nbsp;&amp;nbsp;语句序列;   </span><br><span class="line">&gt; [break];   </span><br><span class="line">&gt; case 值2:   </span><br><span class="line">&gt; &amp;nbsp;&amp;nbsp;语句序列;   </span><br><span class="line">&gt; [break] ;   </span><br><span class="line">&gt;  … … … … …  </span><br><span class="line">&gt; [default:   </span><br><span class="line">&gt; 默认语句 ;]  </span><br><span class="line">&gt;&#125;  </span><br><span class="line"></span><br><span class="line">1.switch语句会根据表达式的值从相匹配的执行，一直执行到break标签处开始ak语句处或</span><br><span class="line">者是switch语句的末尾。与任一case值不匹配，则进入default语句(如果有的话)  </span><br><span class="line">2.只能处理等值条件判断的情况，且表达式必须为byte，short，int或char类型 ，不能是</span><br><span class="line">String或double,float.  </span><br><span class="line">3.常量值必须是与表达式类型兼容的特定的一个常量  </span><br><span class="line">4.不允许有重复的case值  </span><br><span class="line">5.default子句为可选  </span><br><span class="line"></span><br><span class="line">示例：</span><br></pre></td></tr></table></figure><p>char c = ‘a’;<br>int rand =(int) (26*Math.random());<br>char c2 = (char)(c+rand);<br>System.out.print(c2 + “: ”);<br>switch (c2) {<br>case ‘a’:<br>case ‘e’:<br>case ‘i’:<br>case ‘o’:<br>case ‘u’:<br>System.out.println(“元音”); break;<br>case ‘y’:<br>case ‘w’:<br>System.out.println(“半元音”); break;<br>default:<br>System.out.println(“辅音”);<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### 循环  </span><br><span class="line"></span><br><span class="line">1. while循环   </span><br><span class="line">&gt;循环结构都由如下四个结构组成：</span><br><span class="line">初始化、条件判断、循环体、迭代</span><br><span class="line"></span><br><span class="line">- 在循环刚开始时，会计算一次“布尔表达式”的值，若条件为真，执行循环体。而对于</span><br><span class="line">  后来每一次额外的循环，都会在开始前重新计算一次。</span><br><span class="line">- 语句中应有使循环趋向于结束的语句，否则会出现无限循环–&quot;死&quot;循环。  </span><br><span class="line"></span><br><span class="line">示例：  </span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">public class WhileTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int i &#x3D; 0;</span><br><span class="line">        int sum &#x3D; 0;</span><br><span class="line">        while (i &lt;&#x3D; 100) &#123; </span><br><span class="line">            sum +&#x3D; i; &#x2F;&#x2F;sum &#x3D; sum+i;</span><br><span class="line">            i++; </span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;Sum&#x3D; &quot; + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#96;&#96;&#96;   </span><br><span class="line"></span><br><span class="line">2. do-while循环  </span><br><span class="line"></span><br><span class="line">- do-while: </span><br><span class="line">  - 先执行，后判断。  </span><br><span class="line">- while: </span><br><span class="line">  - 先判断，后执行。 </span><br><span class="line">  </span><br><span class="line">示例：</span><br></pre></td></tr></table></figure><p>int a = 0;<br>while(a&lt;0){<br>System.out.println(a);<br>a++;<br>}<br>System.out.println(“—–”);<br>a=0;<br>do{<br>System.out.println(a);<br>a++;<br>} while (a&lt;0);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">While和dowhile的区别：  </span><br><span class="line">&gt; Dowhile总是保证循环体会被至少执行一次！</span><br><span class="line">  这是他们的主要差别  </span><br><span class="line"></span><br><span class="line">3. for循环  </span><br><span class="line"></span><br><span class="line">for循环语句是支持迭代的一种通用结构，是最有效、最灵活</span><br><span class="line">的循环结构  </span><br><span class="line"></span><br><span class="line">语法形式:</span><br><span class="line"></span><br><span class="line"> - for (初始表达式;布尔表达式;步进) &#123;   </span><br><span class="line">       &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;循环体；  </span><br><span class="line">   &#125;  </span><br><span class="line">   </span><br><span class="line">注意事项:</span><br><span class="line"></span><br><span class="line"> - for循环在执行条件测试后，先执行程序部分，再执行步进。</span><br><span class="line"> - 在for语句的初始化部分声明的变量，其作用域为整个for循环体</span><br><span class="line"> -  “初始化”和“循环条件表达式”部分可以使用逗号来执行多个操作</span><br><span class="line"> - 如果三个部分都为空语句（分号不能省），相当于一个无限循环  </span><br><span class="line"> </span><br><span class="line">##### 跳转语句---break和continue  </span><br><span class="line"></span><br><span class="line">1.break和continue</span><br><span class="line">- 在任何循环语句的主体部分，均可用break控制循环的流程。break用于强行退出循环，</span><br><span class="line">   不执行循环中剩余的语句。(break语句还可用于多支语句switch中)   </span><br><span class="line">- continue 语句用在循环语句体中，用于终止某次循环过程，即跳过循环体中尚未执行的</span><br><span class="line">   语句，接着进行下一次是否执行循环的判定。  </span><br><span class="line">   </span><br><span class="line">生成0-100随机数，直到生成88为止，停止循环！</span><br></pre></td></tr></table></figure><p>int total = 0;<br>System.out.println(“Begin”);<br>while(true) {<br>total++;<br>int i = (int)Math.round(100 * Math.random());<br>if(i == 88)<br>break;<br>}<br>System.out.println(“Game over, used “ + total + “ times.”);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">把100~150之间不能被3整除的数输出：</span><br></pre></td></tr></table></figure><p>for (int i = 100; i &lt; 150; i++) {<br>if (i % 3 == 0)<br>continue;<br>System.out.println(i);<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line">2.return  </span><br><span class="line">return语句从当前方法退出，返回到调用该方法的语句处，并从该语句的下条语句处继</span><br><span class="line">续执行程序。  </span><br><span class="line"></span><br><span class="line">返回语句的两种格式（具体到方法时详细讲解）:  </span><br><span class="line"> </span><br><span class="line"> - return expression  </span><br><span class="line">   </span><br><span class="line">   - 返回一个值给调用该方法的语句。</span><br><span class="line">   - 返回值的数据类型必须和方法声明中的返回值类型一致或是精度低于声明的数据类型。</span><br><span class="line"> </span><br><span class="line"> - return  </span><br><span class="line">   </span><br><span class="line">   - 当方法声明中用void声明返回类型为空时，应使用这种返回类型，它不返回任何值。  </span><br><span class="line">   </span><br><span class="line">3.总结</span><br><span class="line"></span><br><span class="line">- break  </span><br><span class="line">  - switch语句  </span><br><span class="line">  - 循环语句  </span><br><span class="line"></span><br><span class="line">- continue  </span><br><span class="line">  - 循环语句  </span><br><span class="line"></span><br><span class="line">- return  </span><br><span class="line">  </span><br><span class="line">  - 任何语句中，结束当前方法，和循环其实没有什么关系  </span><br><span class="line">  </span><br><span class="line">##### 多重循环（循环嵌套）  </span><br><span class="line"></span><br><span class="line">多重循环:</span><br><span class="line"> - 一个循环体内又包含另一个完整的循环结构  </span><br><span class="line"> - 任何两种循环都可以相互嵌套</span><br><span class="line"> - 可以任意层次循环，但是一般不超过3层  </span><br><span class="line">&gt; while(循环条件1)&#123;  </span><br><span class="line">   &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#x2F;&#x2F;循环操作1  </span><br><span class="line">   &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(循环条件2)&#123;  </span><br><span class="line">   &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#x2F;&#x2F;循环操作2  </span><br><span class="line">   &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#125;  </span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">执行过程:  </span><br><span class="line">- 外层循环变量变化一次，内层循环变量要变化一遍  </span><br><span class="line"></span><br><span class="line">&gt; for(循环条件1)&#123;  </span><br><span class="line">    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#x2F;&#x2F;循环操作1  </span><br><span class="line">    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(循环条件2)&#123;  </span><br><span class="line">    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#x2F;&#x2F;循环操作2  </span><br><span class="line">  &#125;   </span><br><span class="line"></span><br><span class="line">#### 方法  </span><br><span class="line"></span><br><span class="line">##### 什么是方法:  </span><br><span class="line"></span><br><span class="line">- 封装在一起来执行操作语句的集合，用来完成某个功能操作</span><br><span class="line">- 在某些语言中称为函数或者过程</span><br><span class="line">- 特殊的方法main，程序执行的入口  </span><br><span class="line">  &gt; public static void main(String [ ] args)&#123;   </span><br><span class="line">       &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;实现功能的语句  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">- 不可能所有的功能都放到main中，需要定义其他方法完成指定功能，需要时调用方法即可  </span><br><span class="line"></span><br><span class="line">##### 定义方法</span><br></pre></td></tr></table></figure><p>[修饰符] 方法返回值类型 方法名(形参列表 ) {<br>方法体<br>return 返回值；<br>} </p></li></ul></li></ul><p>public static int add(int a, int b, int c) {<br>    int k = a + b + c;<br>    return k;<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">- 修饰符：决定了方法的工作范围   </span><br><span class="line">- 返回值类型：必选，如果没有返回值，须写void。方法只能返回一个值</span><br><span class="line">- 方法名：</span><br><span class="line">- 参数列表：可以0个、1个、多个，需要同时说明类型。称为形式参数</span><br><span class="line">- 方法体：完成具体功能。如果有返回值，必须有return语句；如果没有返回值，默认最后一条语句是return，可以省略。  </span><br><span class="line"></span><br><span class="line">##### 方法调用   </span><br><span class="line">- 形参列表格式：</span><br><span class="line">  &gt; 数据类型1 形参名1，数据类型2 形参名2，…  </span><br><span class="line">- return 语句用于终止方法的执行并指定要返回的数据</span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">public class MethodTest &#123;</span><br><span class="line">    public static int add(int a, int b, int c) &#123;</span><br><span class="line">        int k &#x3D; a + b + c;</span><br><span class="line">        return k;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int i &#x3D; 3,j&#x3D;4,k&#x3D;5;</span><br><span class="line">        int result &#x3D;add(i, j, k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#96;&#96;&#96;               </span><br><span class="line">- 调用方法调用的形式：</span><br><span class="line">  &gt; 对象引用.方法名(实参列表)</span><br><span class="line">- 实参的数目、数据类型和次序必须和所调用方法声明的形参列表匹配  </span><br><span class="line"></span><br><span class="line">##### 方法重载  </span><br><span class="line"></span><br><span class="line">- 一个类中可以定义有相同的名字，但参数不同的多个方法</span><br><span class="line">- 调用时，会根据不同的参数表选择对应的方法。  </span><br><span class="line"></span><br><span class="line">判断依据:</span><br><span class="line">- 同一个类</span><br><span class="line">- 同一个方法名</span><br><span class="line">- 不同：参数列表不同(类型，个数，顺序不同)   </span><br><span class="line"></span><br><span class="line">注意:  </span><br><span class="line">- 只有返回值不同不构成方法的重载</span><br><span class="line">- 只有形参的名称不同，不构成方法的重载  </span><br><span class="line"></span><br><span class="line">#### 数组  </span><br><span class="line"></span><br><span class="line">数组是相同类型数据的有序集合.</span><br><span class="line">  </span><br><span class="line">  - 相同类型的若干个数据,按照一定先后次序排列组合而成。</span><br><span class="line">  - 其中,每一个数据称作一个数组元素</span><br><span class="line">  - 每个数组元素可以通过一个下标（0~n-1）来访问它们.  </span><br><span class="line">  </span><br><span class="line">数组特点：   </span><br><span class="line">  </span><br><span class="line">  - 其长度是确定的。数组一旦被创建，它的大小就是不可以改变的。</span><br><span class="line">  - 其元素必须是相同类型,不允许出现混合类型。</span><br><span class="line">  - 数组中的元素可以是任何数据类型，包括基本类型和引用类型。</span><br><span class="line">  - 数组属引用类型  </span><br><span class="line">  </span><br><span class="line">##### 一维数组  </span><br><span class="line">一维数组的声明方式有两种： </span><br><span class="line"></span><br><span class="line">  - type[] arr_name; </span><br><span class="line">  - type arr_name[];  </span><br><span class="line">  </span><br><span class="line">例如：  </span><br><span class="line">&gt; int[] intArrays; int intArrays[];   </span><br><span class="line">&gt; double[] doubleArrays;   </span><br><span class="line">&gt; Person[] pArrays;   </span><br><span class="line">&gt; String[] strArrays;  </span><br><span class="line"></span><br><span class="line">创建基本数据类型一维数组对象演示:  </span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String args[])&#123;</span><br><span class="line">        int[] s &#x3D; new int[10];</span><br><span class="line">        for ( int i&#x3D;0; i&lt;10; i++ ) &#123;</span><br><span class="line">            s[i] &#x3D;2*i+1;</span><br><span class="line">            System.out.println(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#96;&#96;&#96;  </span><br><span class="line">动态初始化:  </span><br><span class="line"> </span><br><span class="line"> - 数组定义与为数组元素分配空间并赋值的操作分开进行。  </span><br><span class="line"></span><br><span class="line">静态初始化：</span><br><span class="line"></span><br><span class="line"> - 除了用new关键字来产生数组以外,还可以直接在定义数组的同时就为数组元素分配空间并赋值。</span><br><span class="line">  &gt; 格式: 类型[] 数组名 &#x3D; &#123;元素1[, 元素2 ……]&#125;;   </span><br><span class="line">  &gt; int[] a &#x3D; &#123;1, 2, 3, 4, 5&#125;;    </span><br><span class="line">  </span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String args[]) &#123;</span><br><span class="line">        int [] a &#x3D; &#123; 3, 5, 7 &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#96;&#96;&#96;  </span><br><span class="line"> </span><br><span class="line">数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个</span><br><span class="line">元素也被按照实例变量同样的方式被隐式初始化  </span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">public class ArrayTest3 &#123;</span><br><span class="line">    public static void main(String args[]) &#123;</span><br><span class="line">        int a[] &#x3D; new int[2];</span><br><span class="line">        boolean [] b &#x3D; new boolean[2];</span><br><span class="line">        String[] s &#x3D; new String[2];</span><br><span class="line"></span><br><span class="line">        for(int i &#x3D; 0; i &lt; 2; i++)</span><br><span class="line">            System.out.println(a[i]);</span><br><span class="line">        for(int i &#x3D; 0; i &lt; 2; i++)</span><br><span class="line">            System.out.println(b[i]);</span><br><span class="line">        for(int i &#x3D; 0; i &lt; 2; i++)</span><br><span class="line">            System.out.println(s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#96;&#96;&#96;  </span><br><span class="line">输出结果：</span><br><span class="line">&gt; 0  </span><br><span class="line">  0  </span><br><span class="line">  false  </span><br><span class="line">  false  </span><br><span class="line">  null  </span><br><span class="line">  null  </span><br><span class="line"></span><br><span class="line">数组元素的引用方式：arrayName[index]  </span><br><span class="line">  </span><br><span class="line">  - index为数组元素下标，可以是整型常量或整型表达式。如a[3] , b[i] , c[6*i]; </span><br><span class="line">  - 数组元素下标从0开始；长度为n的数组合法下标取值范围： 0 ~ n-1；  </span><br><span class="line"></span><br><span class="line">每个数组都有一个属性length指明它的长度，例如：a.length 指明数组a的长度(元素个数)；</span><br><span class="line"></span><br><span class="line">  - 数组的长度: 数组名.length  </span><br><span class="line">  </span><br><span class="line">起点和终点</span><br><span class="line"></span><br><span class="line">  - 起点: 数组名[0] </span><br><span class="line">  - 终点: 数组名[length-1]  </span><br><span class="line">  </span><br><span class="line">##### 二维数组  </span><br><span class="line">二维数组可以看成以数组为元素的数组。例如：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">int [][] a&#x3D; &#123;% raw %&#125;&#123;&#123;1,2&#125;,&#123;3,4,5,6&#125;,&#123;7,8,9&#125;&#125;&#123;% endraw %&#125;;</span><br></pre></td></tr></table></figure><p>Java中多维数组的声明和初始化应按从高维到低维的顺序。<br>例如：  </p><blockquote><p>int [][] a= new int[3][];<br>  a[0] = new int[2];<br>  a[1] = new int[4];<br>  a[2] = new int[3];<br>  int t1[][] = new int[][4]; //非法  </p></blockquote><h5 id="数组的拷贝"><a href="#数组的拷贝" class="headerlink" title="数组的拷贝"></a>数组的拷贝</h5><p>使用java.lang.System类的静态方法  </p><blockquote><p>public static void arraycopy<br>(Object src,int srcPos,Object dest, int destPos,int length)</p></blockquote><p>可以用于数组src从第srcPos项元素开始的length个元素拷贝到目标数组从destPos项开始<br>的length个位置。  </p><p>如果源数据数目超过目标数组边界会抛出 IndexOutOfBoundsException 异常。</p><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest7</span> </span>{    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>{        String[] s = {<span class="string">"Mircosoft"</span>,<span class="string">"IBM"</span>,<span class="string">"Sun"</span>,<span class="string">"Oracle"</span>,<span class="string">"Apple"</span>};        String[] sBak = <span class="keyword">new</span> String[<span class="number">6</span>];        System.arraycopy(s,<span class="number">0</span>,sBak,<span class="number">0</span>,s.length);        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sBak.length;i++){            System.out.print(sBak[i]+<span class="string">" "</span>);        }        System.out.println(<span class="string">'-----------------------'</span>);        <span class="keyword">int</span>[][] intArray = &lt;!--￼<span class="number">13</span>--&gt;;        <span class="keyword">int</span>[][] intArrayBak = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][];        System.arraycopy(intArray,<span class="number">0</span>,intArrayBak,<span class="number">0</span>,intArray.length);        intArrayBak[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">100</span>;        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;intArray.length;i++){            <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>;j&lt;intArray[i].length;j++){                System.out.print(intArray[i][j]+<span class="string">" "</span>);            }            System.out.println();        }    }}</code></pre><hr><h4 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h4>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;java学习导读.md&#39;</title>
      <link href="/2020/05/08/java%E5%AD%A6%E4%B9%A0%E5%AF%BC%E8%AF%BB/"/>
      <url>/2020/05/08/java%E5%AD%A6%E4%B9%A0%E5%AF%BC%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="学习环境："><a href="#学习环境：" class="headerlink" title="学习环境："></a>学习环境：</h3><ul><li>Windows10 - 操作系统</li><li>jdk1.8 - java基础包（网上百度有很多教程）</li><li>IDEA - 集成开发环境 </li></ul><p>之后未做特殊声明，均为</p><h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul><li>java基础 - &lt;&gt;</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo个人博客搭建</title>
      <link href="/2020/04/26/%E7%AC%AC%E4%B8%80%E7%AF%87hexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/04/26/%E7%AC%AC%E4%B8%80%E7%AF%87hexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>  学了这么久的java编程，还没有做一些笔记，觉得是时候该养成一个好习惯了。</p><p>  我的第一篇个人博客，就从hexo个人博客搭建开始吧。</p><hr><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>  使用hexo在本地搭建博客，然后通过GitHub部署到远程仓库中，并被能够被所有人访问<br>  由于hexo自带的主题一般，所以需要我们自己安装主题，我选择的是 <a href="https://jerryc.me/" target="_blank" rel="noopener">butterfly</a></p><hr><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><ul><li>Windows10系统</li><li>git – 用于管理位于本地和GitHub上的代码仓库（<a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git/" target="_blank" rel="noopener">安装教程见官网</a>）</li><li>node – 安装hexo所必须的环境,按照<a href="http://nodejs.cn/" target="_blank" rel="noopener">官网</a>即可快速安装</li></ul><hr><h3 id="npm安装Hexo"><a href="#npm安装Hexo" class="headerlink" title="npm安装Hexo"></a>npm安装Hexo</h3><p>  在git和node都安装好之后，使用npm前最好切换为taobao的源，下载的会快一些：</p><blockquote><p>npm config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a>  </p></blockquote><p>  验证是否切换成功：</p><blockquote><p>npm config get registry  </p></blockquote><p>  如果有 <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a> 显示测成功  </p><p>  npm安装hexo:</p><blockquote><p>npm install -g hexo-cli  </p></blockquote><p>  验证是否安装成功：</p><blockquote><p>hexo version</p></blockquote><p>  如果有版本号，则安装成功</p><hr><h3 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h3><p>  在d盘下创建my_blog的文件夹作为博客的根目录。</p><p>  打开Git Bash(使用这个比cmd要方便，比如可以使用vi编辑文件，而cmd就不行)  </p><p>  进入my_blog文件夹，输入hexo init hexo，开始hexo初始化</p><p>  进入hexo</p><blockquote><p>cd hexo  </p></blockquote><p>  你将会看到如下目录<br>  <img src="/" class="lazyload" data-src="/images/003.png"  alt=""></p><p>  解释一下：</p><ul><li><p>node_modules：是依赖包  </p></li><li><p>public：存放的是生成的页面</p></li><li><p>scaffolds：命令生成文章等的模板</p></li><li><p>source：用命令创建的各种文章</p></li><li><p>themes：主题</p></li><li><p>_config.yml：整个博客的配置</p></li><li><p>db.json：source解析所得到的</p></li><li><p>package.json：项目所需模块项目的配置信息</p><p>安装</p><blockquote><p>npm install  </p></blockquote></li></ul><h3 id="启动博客"><a href="#启动博客" class="headerlink" title="启动博客"></a>启动博客</h3><p>  生成静态页面</p><blockquote><p>hexo generate 或者 hexo g  </p></blockquote><p>  在本地启动hexo博客</p><blockquote><p>hexo server 或者 hexo s<br>hexo s -d – -d表示后台运行  </p></blockquote><p>  清除缓存</p><blockquote><p>hexo clean</p></blockquote><p>  写博客</p><blockquote><p>hexo new ‘博客标题’ 或者 hexo n ‘博客标题’  </p></blockquote><p>  hexo站点目录下的/source/_posts/目录下可以看到生成了名为：第一篇博客.md<br>  hexo采用Markdown语法，参考学习地址：<a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a></p><p>  按照markdown语法编写即可</p><ul><li><p>插入图片(我图方便就直接使用本地的图片，本来想用有道云笔记的图床，结果不知道为什么不能用，你也可以使用其他图床)</p><blockquote><p><code>![tip](/images/xxx.png)</code></p></blockquote></li><li><p>图片存放位置</p><p>hexo站点目录下的source\images</p><p>浏览器访问<code>http://localhost:4000</code>，就可以看到hexo默认的页面</p></li></ul><hr><h3 id="安装hexo-admin通过浏览器管理发布博客"><a href="#安装hexo-admin通过浏览器管理发布博客" class="headerlink" title="安装hexo-admin通过浏览器管理发布博客"></a>安装hexo-admin通过浏览器管理发布博客</h3><p>  安装hexo-admin</p><blockquote><p>npm i hexo-admin –save  </p></blockquote><p>  启动成功后，访问<code>http://localhost:4000/admin</code>,即可看到如下：</p><p>  <img src="/" class="lazyload" data-src="/images/002.png"  alt=""></p><p>  这时，通过 <a href="http://ip:4000/admin" target="_blank" rel="noopener">http://ip:4000/admin</a> 即可管理博客。<br>  也可以在这个页面的setting中生成后台的用户名和密码。<br>  复制到_config.yml就会生效，重启博客后登录后台前就需要账号密码。</p><h3 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h3><p>  hexo主题可以在网上搜索，这里有个 <a href="https://blog.csdn.net/zgd826237710/article/details/99671027" target="_blank" rel="noopener">推荐</a><br>  个人觉得不错,其中的Diaspora、Butterfly、black-blue都不错。  </p><p>  我选择的是Butterfly<a href="https://jerryc.me/" target="_blank" rel="noopener">预览</a>，是我喜欢的风格。</p><p>  安装可以按照预览中的教程进行，首先克隆主题项目的地址<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https:&#x2F;&#x2F;github.com&#x2F;jerryc127&#x2F;hexo-theme-butterfly.git themes&#x2F;Butterfly</span><br></pre></td></tr></table></figure></p><p>  或者<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b dev https:&#x2F;&#x2F;github.com&#x2F;jerryc127&#x2F;hexo-theme-butterfly.git themes&#x2F;Butterfly</span><br></pre></td></tr></table></figure><br>  更换主题：进入根目录，更改配置文件<code>_config.yml</code>,将theme:landscape改为:</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">black-blue</span></span><br></pre></td></tr></table></figure><p>  重新启动。</p><p>  更多的关于主题的配置，请参考具体每个主题的官方说明,之后再详细说明如何安装</p><hr><h3 id="部署到GitHub仓库中"><a href="#部署到GitHub仓库中" class="headerlink" title="部署到GitHub仓库中"></a>部署到GitHub仓库中</h3><ul><li><p>首先注册GitHub账号，在repo中创建一个仓库，其中yourname是你的github名称，按照这个规则创建才有用哦，如下：</p><p><img src="/" class="lazyload" data-src="/images/new-repo.png"  alt=""><br><img src="/" class="lazyload" data-src="/images/create-repo.png"  alt=""></p></li><li><p>回到gitbash中，配置github账户信息（YourName和YourEail都替换成你自己的）：</p><p><img src="/" class="lazyload" data-src="/images/004.png"  alt=""></p></li><li><p>创建SSH  </p><p>在gitbash中输入：ssh-keygen -t rsa -C “<a href="mailto:youremail@example.com">youremail@example.com</a>，生成ssh。然后按下图的方式找到id_rsa.pub文件的内容。</p><p><img src="/" class="lazyload" data-src="/images/ssh.png"  alt=""></p></li><li><p>将上面获取的ssh放到github中：</p><p><img src="/" class="lazyload" data-src="/images/ssh-key.png"  alt=""></p></li><li><p>在gitbash中验证是否添加成功：</p><blockquote><p>ssh -T <a href="mailto:git@github.com">git@github.com</a></p></blockquote></li><li><p>用编辑器打开你的blog项目，修改_config.yml文件的一些配置(冒号之后都是有一个半角空格的)：</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">https://github.com/YourgithubName/YourgithubName.github.io.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><ul><li><p>上传到github</p></li><li><p>先安装一波：npm install hexo-deployer-git –save（这样才能将你写好的文章部署到github服务器上并让别人浏览到）<br>执行命令(建议每次都按照如下步骤部署)：</p></li></ul><pre><code>hexo cleanhexo g/generatehexo d/deploy  </code></pre><ul><li>在浏览器中输入 <a href="http://yourgithubname.github.io" target="_blank" rel="noopener">http://yourgithubname.github.io</a> 就可以看到你的个人博客啦</li></ul><hr><h3 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h3><p>  其实应该有这个步骤的，不过囊中羞涩，只有过段时间再补上了</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
